<?php

function nl(): void {
	echo PHP_EOL;
}

function print_source_code(string $code): void {
	$wrapped = "┌\n│ " . preg_replace('#\n#', "\n│ ", $code);
	echo rtrim(rtrim($wrapped), '│') . '└';
}

?>

█ <?= $tpl['app_name']; nl() ?>
█ PHP <?= phpversion(); nl() ?>

Engine used: <?= $tpl['engine_used']; nl() ?>
Total time: <?= number_format($tpl['total_time'], 4) ?> sec
Iterations: <?= number_format($tpl['count'], 0, '.', ' '); nl() ?>

<?php

	$position = 0;
	foreach($tpl['results'] as $index => $resultTime) {

		$closure = $tpl['closures'][$index];

		// Avoid division by zero in certain cases.
		if ($tpl['total_time'] && $resultTime && $tpl['min_time'] && $tpl['min_time'] - $tpl['max_time']) {

			$score = $tpl['min_time'] / $resultTime * 100;
			$score2 = $resultTime / $tpl['min_time'];

		} else {

			$score2 = false;
			$score = false;

		}

	echo sprintf(
		'██ %s. Score: %s%s',
		$index + 1,
		$score !== false
			? floor($score)
			: 'N/A',
		$score !== false
			? '.' . sprintf('%02d', ($score - floor($score)) * 100)
			: null);

	echo ', ';

	echo number_format($resultTime, 4) . ' sec';

	if ($score2 != 1) {
		echo ', ';
		echo $score2 !== false ? number_format($score2, 2) . 'x slower' : 'N/A';
	}

	nl();
	print_source_code($tpl['source_function']($closure));

	nl();
	nl();

}
